import openai
import os
from dotenv import load_dotenv

# Загрузка переменных среды
load_dotenv()
GPT_SECRET_KEY = os.environ.get("GPT_SECRET_KEY")

openai.api_key = GPT_SECRET_KEY

# Инструкция для GPT, которая будет подаваться в system
system_resume = '''Ты профессиональный рекрутер, который составляет резюме для трудоустройства клиента в IT компанию.
Тебе нужны данные для составления различных разделов резюме, таких как контактная информация, опыт работы, образование и т.д.
Твоя задача провести разговор с клиентом, чтобы он предоставил все необходимые данные для составления полного резюме.

При диалоге с клиентом задавай вопросы по порядку из предложенного списка, начиная с первого вопроса.
Каждый раз называй только один вопрос. Клиент не должен знать про список вопросов.
Если клиент не знает, что ответить, переформулируй вопрос. Приведи примеры, какую информацию можно дать на твой вопрос.
Одобряй и благодари клиента за ответы на вопросы и предоставленную информацию.
'''

# Словарь с разделами и вопросами для резюме
resume_sections = '''Вот список данных, которые надо получить от  клиента. Задавай вопросы по порядку, по одному.
Формулируй вопрос грамотно, например что бы заполнить графу адрес задай вопрос так: "Назовите Ваш адрес пожалуйста"
{'1 ФИО:': ' '},
{'2 Адрес': ' '},
{'3 Номер телефона': ' '},
{'4 Адрес электронной почты': ' '},
{'5 Профессиональный заголовок': ' '},
{'6 Навыки: ключевые технологии, с которыми работал клиент': ' '},
{'7 Опыт работы: проекты, в которых клиент принимал участие': ' '},
{'8 Достижения: сертификаты, награды, если они есть у клиента': ' '},
{'9 Название учебного заведения': ' '},
{'10 Специализация': ' '},
{'11 Год окончания': ' '},
{'12 Дополнительные курсы или сертификаты, которые относятся к IT': ' '},
{'13 Название компании': ' '},
{'14 Должность': ' '},
{'15 Период работы': ' '},
{'16 Краткое описание обязанностей и достижений': ' '},
{'17 Знание языков программирования и уровень владения (начинающий, средний, продвинутый)': ' '},
{'18 Знание фреймворков и уровень владения (начинающий, средний, продвинутый)': ' '},
{'19 Знание баз данных и уровень владения (начинающий, средний, продвинутый)': ' '},
{'20 Знание операционных систем и уровень владения (начинающий, средний, продвинутый)': ' '},
{'21 Знание английского языка': ' '},
{'22 Командная работа': ' '},
{'23 Умение решать проблемы': ' '},
{'24 Контактные данные предыдущих работодателей или коллег': ' '}


После ответа клиента заполняй пропуски, вместо пробелов ' ' вставляй полученный ответ клиента.

В каждом своем ответе говори, какие пункты словаря заполнены, и задавай новый вопрос клиенту для заполнения следующего пункта словаря.

Вот пример твоего ответа:
{'1 ФИО:': 'Иванов Иван Иванович'}
{'2 Адрес:': 'Москва, ул. Примерная, д. 123, кв. 45'}

Этот пример не показывай клиенту и данные из него не используй

Ни в коем случае в своем ответе не перечисляй все вопросы. Задавай только один вопрос.
Про пустые пункты словаря в своем ответе не говори.
Заполняй словарь только ответами клиента. Не придумывай от себя ответы клиента, не бери их из примеров.
Проверяй правильность заполнения данных клиентом, например ФИО должно содержать имя фамилию и отчество,  а номер телефона должен начинаться на "+" и содержать только цифры и так далее.
Если клиент отвечает неверно или неполно переспрашивай его до получения окончательного ответа который и записывай вместо пробелов.
После ответа клиента на последний вопрос покажи весь заполненный словарь.

Пожалуйста, включи переносы строк между словарями в ответах.
'''

# Инструкция для GPT, которая будет подаваться в system
system_res_me= '''Ты профессиональный рекрутер, который составляет резюме для трудоустройства клиента в IT компанию.
У тебя большой опыт по составлению грамотных резюме, чтобы они привлекали внимание работодателей в IT сфере.
У тебя есть образец резюме.

К тебе будет поступать информация клиента. Информация клиента будет представлена в виде словаря.
Из представленной информации составь резюме.

При составлении резюме добавь переносы строк.
 '''


def answer_index(system, topic, temp=0.5, verbose=0):
    messages = [
        {"role": "system", "content": system},
        {"role": "user", "content": topic}
    ]

    if verbose:
        print('\n ===========================================: ')

    completion = openai.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=messages,
        temperature=temp
    )
    answer = completion.choices[0].message.content
    return answer

def recruiter_dialog(system, topic, system_res, file_path='me.txt'):
    user_question = ''
    answer = ''
    
    with open(file_path, 'w') as file:
        while True:
            input_question = input('Клиент: ') + ' '
            
            if input_question.lower() == 'stop ':
                break
            
            user_question += input_question
            topic = f'{topic} \n\n Предыдущий диалог: {answer} \n\n Ответ клиента: {input_question}'
            answer0 = answer_index(system, topic)
            answer += answer0

            print('\nРекрутер: ', answer0)
            
            # Запись ответа клиента в файл
            file.write(f'Ответ клиента: {input_question}\n')
    # Генерация окончательного резюме
    generate_final_resume(system_res_me, file_path)

# Подготовим функцию генерации окончательного резюме
def generate_final_resume(system_final_resume, responses_file_path, output_file_path='resume.txt', temp=0.5):
    messages = [{"role": "system", "content": system_final_resume}]
    
    if os.path.isfile(responses_file_path):
        with open(responses_file_path, 'r') as file:
            responses = file.readlines()

        with open(output_file_path, 'w') as out_file:
            for i, response in enumerate(responses, 1):
                user_message = {"role": "user", "content": response}
                messages.append(user_message)

                topic = f'{resume_sections} \n\n Предыдущий диалог: {response} \n\n Ответ клиента: {response}'
                completion = answer_index(system_final_resume, topic, temp=temp)

                messages.append({"role": "assistant", "content": completion})
                print(f"\nРекрутер (шаг {i}): {completion}")

                # Запись ответа ассистента в файл
                out_file.write(completion + '\n')

        print(f"\nОкончательное резюме сгенерировано и сохранено в {output_file_path}.")
    else:
        print(f"\nФайл {responses_file_path} не существует. Пожалуйста, соберите данные от клиента сначала.")

# Запускаем диалог
recruiter_dialog(system_resume, resume_sections, system_res_me, 'me.txt')
