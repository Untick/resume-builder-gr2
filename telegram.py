import datetime
from typing import Callable, Union

from telebot import TeleBot, types
from telebot.apihelper import ApiTelegramException

import config
from telebot.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

import crud
import utils

bot = TeleBot(token=config.TG_BOT_TOKEN)


@bot.message_handler(commands=['start'])
def start_command(message: types.Message):
    user_info_id, user_info_name = crud.get_user_by_tg_id(message.from_user.username)
    if user_info_id:
        other_message_handler(message)
    else:
        msg = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω'
        bot.reply_to(message, msg)


@bot.message_handler(commands=['help'])
def help_command(message: types.Message):
    user_info_id, user_info_name = crud.get_user_by_tg_id(message.from_user.username)
    if user_info_id:
        msg = '''–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
/menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É'''
    else:
        msg = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω'
    bot.reply_to(message, msg)


@bot.message_handler(commands=['menu'])
async def menu_command_tg(message: types.Message):
    user_info_id, user_info_name = crud.get_user_by_tg_id(message.from_user.username)
    if user_info_id:
        UserMenu.get_menu(user_info_id).cb_main_menu.set_active(jump=True)


# –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥
@bot.message_handler(content_types=['text'])
def other_message_handler(message: types.Message):
    user_info_id, user_info_name = crud.get_user_by_tg_id(message.from_user.username)
    if not user_info_id:
        bot.reply_to(message, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω')
        return
    user_answer = message.text  # –µ—â–µ –µ—Å—Ç—å html_text –∏ —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏—è - –ø–æ–∫–∞ —ç—Ç–æ –≤—Å–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if user_answer.lower().strip() == 'stop':
        return

    if user_answer.startswith("/"):
        msg = '–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, /help –¥–ª—è –ø–æ–º–æ—â–∏'
        bot.send_message(message.from_user.id, msg)
    else:
        (current_user_input_handler or reply_stub)(message, user_answer)


@bot.message_handler(content_types=['voice'])
def voice_message(message):
    voice = message.voice
    file_info = bot.get_file(voice.file_id)
    file_url = f'https://api.telegram.org/file/bot{bot.token}/{file_info.file_path}'
    start = datetime.datetime.now().timestamp()
    transcription = utils.get_text_from_audio(file_url)
    bot.send_message(message.chat.id, f'–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ({datetime.datetime.now().timestamp() - start:.1f}): {transcription}')
    (current_user_input_handler or reply_stub)(message, transcription)


@bot.callback_query_handler(func=lambda call: call.data.startswith(menu_prefix))
def button_callback(call: CallbackQuery):
    user_menu = UserMenu.get_menu(call.from_user.id)
    if not user_menu.menu_message_handler or user_menu.menu_message_handler.id != call.message.id:
        bot.delete_message(call.message.chat.id, call.message.id)
    user_menu.menu_screen[call.data].set_active()


def chat_gpt_reply_to_user_message(message, user_answer):
    bot.send_chat_action(message.from_user.id, 'typing')
    next_question = utils.handle_user_reply(message.from_user.username, user_answer)
    if next_question:
        bot.send_message(message.from_user.id, next_question)


def reply_stub(message, _):
    bot.send_message(message.from_user.id, f"–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç —è –Ω–µ –ø–æ–Ω–∏–º–∞—é, –∫ —á–µ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —ç—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–∑ –º–µ–Ω—é")


def get_emoji_for_number(number):
    if 1 <= number <= 10:
        unicode_code_point = ord('1') + (number - 1)
        return chr(unicode_code_point) + '\uFE0F\u20E3'
    else:
        res = ""
        for n in str(number):
            res += get_emoji_for_number(int(n))
        return res


current_user_input_handler = None
menu_prefix = "menu-"


class UserMenu:
    users = {}

    def __init__(self, user_id):
        self.user_id = user_id
        if user_id in UserMenu.users:
            raise IndexError(f"User {user_id} already exists")
        self.menu_screen = {}
        self.menu_message_handler = None
        UserMenu.users[self.user_id] = self

        self.cbs_job = []

        self.cb_main_menu = Screen(self, "back", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –û–±—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", reply_stub)
        cb_main_menu = self.cb_main_menu

        cb_common_info = Screen(self, "ci", "‚ÑπÔ∏è –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ", reply_stub)
        cb_common_info_last_name = Screen(self, "ci_last_name", "–§–∞–º–∏–ª–∏—è", "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ —Ñ–∞–º–∏–ª–∏—é –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ", self.get_reply_handler("–§–∞–º–∏–ª–∏—è"))
        cb_common_info_first_name = Screen(self, "ci_first_name", "–ò–º—è", "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ", self.get_reply_handler("–ò–º—è"))
        cb_common_info_surname = Screen(self, "ci_surname", "–û—Ç—á–µ—Å—Ç–≤–æ", "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ", self.get_reply_handler("–û—Ç—á–µ—Å—Ç–≤–æ"))
        cb_common_info_sex = Screen(self, "ci_sex", "–ü–æ–ª", "–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª", self.get_reply_handler("–ü–æ–ª"))
        cb_common_info_birth_date = Screen(self, "ci_birth_date", "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Å–≤–æ–µ–≥–æ —Ä–æ–∂–¥–µ–Ω–∏—è", self.get_reply_handler("–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è"))

        self.cb_jobs = Screen(self, "jobs", "üíº –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", reply_stub)
        cb_jobs = self.cb_jobs
        self.cb_add_job = Screen(self, "jobs_add", "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã", "–£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã, –≤–∞—à—É —Ä–æ–ª—å –∏ –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã", self.add_job_handler)
        cb_add_job = self.cb_add_job
        cb_covering_letter = Screen(self, "cl", "‚úâÔ∏è –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ", "–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞", self.get_reply_handler("–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ"))

        cb_main_menu.set_keyboard([cb_common_info, cb_jobs, cb_covering_letter])
        cb_common_info.set_keyboard([cb_common_info_last_name, cb_common_info_first_name, cb_common_info_surname, cb_common_info_sex, cb_common_info_birth_date, cb_main_menu])
        cb_jobs.set_keyboard([cb_add_job, cb_main_menu])
        Screen.set_default_keyboard(UserMenu.users[self.user_id], [cb_main_menu])

        cb_main_menu.set_active()

    def get_reply_handler(self, field_name):
        def input_covering_letter(message, text):
            bot.send_message(message.from_user.id, f'–í—ã —É–∫–∞–∑–∞–ª–∏ –¥–ª—è –ø–æ–ª—è "{field_name}" —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç:\n{text}')
            self.cb_main_menu.set_active(jump=True)

        return input_covering_letter

    def add_job_handler(self, message, text, replace=None):
        job_num = replace or len(self.cbs_job) + 1

        def input_edit_job(new_message, new_text):
            bot.send_message(message.from_user.id, f'–í—ã –∏–∑–º–µ–Ω–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã. –°—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n{text}\n\n–ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{new_text}')
            self.add_job_handler(new_message, new_text, job_num)

        if replace:
            self.cbs_job[job_num - 1].unregister()

        cb_jobs_new_job = Screen(self, f"jobs_{job_num}", f"{get_emoji_for_number(job_num)} {text}", f'–£–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã:\n{text}', input_edit_job)

        if replace:
            self.cbs_job[job_num - 1] = cb_jobs_new_job
        else:
            self.cbs_job.append(cb_jobs_new_job)

        self.cb_jobs.set_keyboard(self.cbs_job + [self.cb_add_job, self.cb_main_menu])

        if not replace:
            bot.send_message(message.from_user.id, f'–í—ã –¥–æ–±–∞–≤–∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:\n{text}')
        self.cb_jobs.set_active(jump=True)

    @classmethod
    def get_menu(cls, user_id):
        if user_id not in UserMenu.users:
            UserMenu.users[user_id] = UserMenu(user_id)
        return UserMenu.users[user_id]


class Screen:
    def __init__(self, user_menu: UserMenu, id: str, button_text: str, message_text: Union[str, Callable], input_handler: Callable):
        self.id = f"{menu_prefix}{user_menu.user_id}-{id}"
        self.user_menu = user_menu

        if self.id in self.user_menu.menu_screen:
            raise IndexError(f"Id {id} already exists")
        self.user_menu.menu_screen[self.id] = self
        self.button_text = button_text
        self.message_text = message_text
        self.reply_markup = None
        self.input_handler = input_handler

    def unregister(self):
        del self.user_menu.menu_screen[self.id]

    @staticmethod
    def set_default_keyboard(user_menu: UserMenu, buttons: list):
        for id in user_menu.menu_screen:
            instance = user_menu.menu_screen[id]
            if not instance.reply_markup:
                instance.set_keyboard(buttons)

    def set_keyboard(self, buttons: list):
        keyboard = []
        for button in buttons:
            keyboard.append([InlineKeyboardButton(text=button.button_text, callback_data=button.id)])
        self.reply_markup = InlineKeyboardMarkup(keyboard)

    def set_active(self, jump=False):
        global current_user_input_handler
        current_user_input_handler = self.input_handler
        text = self.message_text if isinstance(self.message_text, str) else self.message_text(self)
        if jump and self.user_menu.menu_message_handler:
            try:
                bot.delete_message(self.user_menu.menu_message_handler.chat.id, self.user_menu.menu_message_handler.id)
            except ApiTelegramException:
                pass
            self.user_menu.menu_message_handler = None
        if self.user_menu.menu_message_handler:
            if self.user_menu.menu_message_handler.text == text:
                if self.user_menu.menu_message_handler.reply_markup:
                    # –∫–Ω–æ–ø–∫–∏ –≤ –Ω–æ–≤–æ–º –Ω–∞–±–æ—Ä–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã, —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤ –ª–æ–± –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ–≥–¥–∞ —Å–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º, –ø–æ—Ç–æ–º —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–µ
                    bot.edit_message_reply_markup(self.user_menu.menu_message_handler.chat.id, self.user_menu.menu_message_handler.id, reply_markup=None)
                bot.edit_message_reply_markup(self.user_menu.menu_message_handler.chat.id, self.user_menu.menu_message_handler.id, reply_markup=self.reply_markup)
            else:
                self.user_menu.menu_message_handler = bot.edit_message_text(text, self.user_menu.menu_message_handler.chat.id, self.user_menu.menu_message_handler.id, parse_mode='HTML', reply_markup=self.reply_markup)
        else:
            self.user_menu.menu_message_handler = bot.send_message(self.user_menu.user_id, text, reply_markup=self.reply_markup)


print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
bot.infinity_polling()
