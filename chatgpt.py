# точка входа для генерации резюме с помощью chatGPT
import json

import openai
import os

import config

# Инструкция для GPT, которая будет подаваться в system
system_doc = '''Ты профессиональный рекрутер, который составляет резюме для трудоустройства клиента в IT компанию.
Тебе будут писать клиенты. Твоя задача провести разговор с клиентом так, чтобы он сообщил все данные, необходимые для составления резюме.
Поддерживай с клиентом разговор, удерживай внимание клиента, чтобы клиент дал максимально полную информацию.
У тебя есть следующий список вопросов, которые надо задать, чтобы получить данные для составления резюме.

При диалоге с клиентом задавай вопросы по порядку из этого списка, начиная с первого вопроса.
Каждый раз называй только один вопрос. Клиент не должен знать про список вопросов.
Если клиент не знает, что ответить, переформулируй вопрос. Приведи примеры, какую информацию можно дать на твой вопрос.
Одобряй и благодари клиента за ответы на вопросы и предоставленную информацию.
 '''

# Для подачи в user
topic0 = '''Вот список вопросов, которые надо задать клиенту. Задавай вопросы по порядку, по одному. Ни в коем случае не перечисляй сразу все вопросы. Называй только один вопрос.
{'1 ФИО': ' '},
{'2 адрес': ' '},
{'3 номер телефона': ' '},
{'4 адрес электронной почты': ' '},
{'5 краткое описание вашей профессиональной роли или цели, например "Full Stack разработчик" или "Data Scientist"': ' '},
{'6 ключевые технологии, с которыми работал клиент. Надо выбрать из перечня: Python, R, SQL, базовые знания статистики, машинное обучение, обработка данных, программная разработка': ' '},
{'7 опыт работы - проекты, в которых клиент принимал участие': ' '},
{'8 достижения - сертификаты, награды, если они есть у клиента': ' '},
{'9 образование - название учебного заведения': ' '},
{'10 специализация в учебном заведении': ' '},
{'11 год окончания учебного заведения': ' '},
{'12 дополнительные курсы или сертификаты, которые относятся к IT': ' '},
{'13 опыт работы - название компании': ' '},
{'14 опыт работы - должность': ' '},
{'15 период работы': ' '},
{'16 краткое описание обязанностей и достижений': ' '},
{'17 знание языков программирования, указать уровень владения (начинающий, средний, продвинутый)': ' '},
{'18 знание фреймворков, указать уровень владения (начинающий, средний, продвинутый)': ' '},
{'19 знание баз данных, указать уровень владения (начинающий, средний, продвинутый)': ' '},
{'20 знание операционных систем, указать уровень владения (начинающий, средний, продвинутый)': ' '},
{'21 знание английского языка': ' '},
{'22 командная работа': ' '},
{'23 умение решать проблемы': ' '},
{'24 рекомендации от предыдущих работодателей или коллег. Надо указать их контактные данные': ' '}
Задавай вопросы из словаря по порядку, по одному, начиная с самого первого без ответа.
После ответа клиента заполни пропуски, вставь вместо пробелов ' ' полученные ответы клиента.
В каждом своем ответе говори какие пункты словаря заполнены и задай новый вопрос клиенту для заполнения следующего пункта словаря.
Ни в коем случае в своем ответе не перечисляй все вопросы. Задавай только один вопрос.
Про пустые пункты словаря в своем ответе не говори.

Ответ клиента: '''

# Для подачи в user-assistant, чтобы показать пример, какие вопросы будут поданы в user (Обратите внимание на последнюю строку)
topic1 = '''Вот список вопросов, которые надо задать клиенту. Задавай вопросы по порядку, по одному. Ни в коем случае не перечисляй сразу все вопросы. Называй только один вопрос.
{'1 ФИО': ' '},
{'2 адрес': ' '},
{'3 номер телефона': ' '},
{'4 адрес электронной почты': ' '},
{'5 краткое описание вашей профессиональной роли или цели, например "Full Stack разработчик" или "Data Scientist"': ' '},
{'6 ключевые технологии, с которыми работал клиент. Надо выбрать из перечня: Python, R, SQL, базовые знания статистики, машинное обучение, обработка данных, программная разработка': ' '},
{'7 опыт работы - проекты, в которых клиент принимал участие': ' '},
{'8 достижения - сертификаты, награды, если они есть у клиента': ' '},
{'9 образование - название учебного заведения': ' '},
{'10 специализация в учебном заведении': ' '},
{'11 год окончания учебного заведения': ' '},
{'12 дополнительные курсы или сертификаты, которые относятся к IT': ' '},
{'13 опыт работы - название компании': ' '},
{'14 опыт работы - должность': ' '},
{'15 период работы': ' '},
{'16 краткое описание обязанностей и достижений': ' '},
{'17 знание языков программирования, указать уровень владения (начинающий, средний, продвинутый)': ' '},
{'18 знание фреймворков, указать уровень владения (начинающий, средний, продвинутый)': ' '},
{'19 знание баз данных, указать уровень владения (начинающий, средний, продвинутый)': ' '},
{'20 знание операционных систем, указать уровень владения (начинающий, средний, продвинутый)': ' '},
{'21 знание английского языка': ' '},
{'22 командная работа': ' '},
{'23 умение решать проблемы': ' '},
{'24 рекомендации от предыдущих работодателей или коллег. Надо указать их контактные данные': ' '}
Задавай вопросы из словаря по порядку, по одному, начиная с самого первого без ответа.
После ответа клиента заполни пропуски, вставь вместо пробелов ' ' полученные ответы клиента.
В каждом своем ответе говори какие пункты словаря заполнены и задай новый вопрос клиенту для заполнения следующего пункта словаря.
Ни в коем случае в своем ответе не перечисляй все вопросы. Задавай только один вопрос.
Про пустые пункты словаря в своем ответе не говори.

Ответ клиента: Привет!'''

# Для подачи в user-assistant, чтобы показать пример, какие вопросы будут поданы в user (Обратите внимание на последнюю строку)
topic2 = '''Вот список вопросов, которые надо задать клиенту. Задавай вопросы по порядку, по одному. Ни в коем случае не перечисляй сразу все вопросы. Называй только один вопрос.
{'1 ФИО': ' '},
{'2 адрес': ' '},
{'3 номер телефона': ' '},
{'4 адрес электронной почты': ' '},
{'5 краткое описание вашей профессиональной роли или цели, например "Full Stack разработчик" или "Data Scientist"': ' '},
{'6 ключевые технологии, с которыми работал клиент. Надо выбрать из перечня: Python, R, SQL, базовые знания статистики, машинное обучение, обработка данных, программная разработка': ' '},
{'7 опыт работы - проекты, в которых клиент принимал участие': ' '},
{'8 достижения - сертификаты, награды, если они есть у клиента': ' '},
{'9 образование - название учебного заведения': ' '},
{'10 специализация в учебном заведении': ' '},
{'11 год окончания учебного заведения': ' '},
{'12 дополнительные курсы или сертификаты, которые относятся к IT': ' '},
{'13 опыт работы - название компании': ' '},
{'14 опыт работы - должность': ' '},
{'15 период работы': ' '},
{'16 краткое описание обязанностей и достижений': ' '},
{'17 знание языков программирования, указать уровень владения (начинающий, средний, продвинутый)': ' '},
{'18 знание фреймворков, указать уровень владения (начинающий, средний, продвинутый)': ' '},
{'19 знание баз данных, указать уровень владения (начинающий, средний, продвинутый)': ' '},
{'20 знание операционных систем, указать уровень владения (начинающий, средний, продвинутый)': ' '},
{'21 знание английского языка': ' '},
{'22 командная работа': ' '},
{'23 умение решать проблемы': ' '},
{'24 рекомендации от предыдущих работодателей или коллег. Надо указать их контактные данные': ' '}
Задавай вопросы из словаря по порядку, по одному, начиная с самого первого без ответа.
После ответа клиента заполни пропуски, вставь вместо пробелов ' ' полученные ответы клиента.
В каждом своем ответе говори какие пункты словаря заполнены и задай новый вопрос клиенту для заполнения следующего пункта словаря.
Ни в коем случае в своем ответе не перечисляй все вопросы. Задавай только один вопрос.
Про пустые пункты словаря в своем ответе не говори.

Ответ клиента: Привет! Иванов Вячеслав Владимирович'''

# Для подачи в user-assistant, чтобы показать пример, какие вопросы будут поданы в user (Обратите внимание на последнюю строку)
topic3 = '''Вот список вопросов, которые надо задать клиенту. Задавай вопросы по порядку, по одному. Ни в коем случае не перечисляй сразу все вопросы. Называй только один вопрос.
{'1 ФИО': ' '},
{'2 адрес': ' '},
{'3 номер телефона': ' '},
{'4 адрес электронной почты': ' '},
{'5 краткое описание вашей профессиональной роли или цели, например "Full Stack разработчик" или "Data Scientist"': ' '},
{'6 ключевые технологии, с которыми работал клиент. Надо выбрать из перечня: Python, R, SQL, базовые знания статистики, машинное обучение, обработка данных, программная разработка': ' '},
{'7 опыт работы - проекты, в которых клиент принимал участие': ' '},
{'8 достижения - сертификаты, награды, если они есть у клиента': ' '},
{'9 образование - название учебного заведения': ' '},
{'10 специализация в учебном заведении': ' '},
{'11 год окончания учебного заведения': ' '},
{'12 дополнительные курсы или сертификаты, которые относятся к IT': ' '},
{'13 опыт работы - название компании': ' '},
{'14 опыт работы - должность': ' '},
{'15 период работы': ' '},
{'16 краткое описание обязанностей и достижений': ' '},
{'17 знание языков программирования, указать уровень владения (начинающий, средний, продвинутый)': ' '},
{'18 знание фреймворков, указать уровень владения (начинающий, средний, продвинутый)': ' '},
{'19 знание баз данных, указать уровень владения (начинающий, средний, продвинутый)': ' '},
{'20 знание операционных систем, указать уровень владения (начинающий, средний, продвинутый)': ' '},
{'21 знание английского языка': ' '},
{'22 командная работа': ' '},
{'23 умение решать проблемы': ' '},
{'24 рекомендации от предыдущих работодателей или коллег. Надо указать их контактные данные': ' '}
Задавай вопросы из словаря по порядку, по одному, начиная с самого первого без ответа.
После ответа клиента заполни пропуски, вставь вместо пробелов ' ' полученные ответы клиента.
В каждом своем ответе говори какие пункты словаря заполнены и задай новый вопрос клиенту для заполнения следующего пункта словаря.
Ни в коем случае в своем ответе не перечисляй все вопросы. Задавай только один вопрос.
Про пустые пункты словаря в своем ответе не говори.

Ответ клиента: Привет! Иванов Вячеслав Владимирович г. Москва, ул Профессиональная, дом 5'''

# Для подачи в assistant, чтобы показать пример, какие ответы должны быть от GPT
answer1 = 'Привет! Я профессиональный рекрутер. Я помогу Вам составить резюме. Скажите Ваше ФИО.'
answer2 = '{"1 ФИО": "Иванов Вячеслав Владимирович"} Какой Ваш адрес?'
answer3 = '{"1 ФИО": "Иванов Вячеслав Владимирович"} {"2 адрес": "г. Москва, ул Профессиональная, дом 5"} Ваш номер телефона?'


def insert_newlines(text: str, max_len: int = 170) -> str:
    words = text.split()
    lines = []
    current_line = ""
    for word in words:
        if len(current_line + " " + word) > max_len:
            lines.append(current_line)
            current_line = ""
        current_line += " " + word
    lines.append(current_line)
    return "\n".join(lines)


def load(file_name):
    try:
        with open(file_name, "r") as json_file:
            json_data = json_file.read()
        data = json.loads(json_data)
    except (json.JSONDecodeError, FileNotFoundError) as e:
        print(f"Ошибка при считывании файла с резюме: {e}")
        data = {}
    return data


def save(data, file_name):
    json_data = json.dumps(data, indent=4)
    with open(file_name, "w") as json_file:
        json_file.write(json_data)


def gpt_resume_builder(user_id: int):
    if user_id in resumes:
        return resumes[str(user_id)]
    else:
        return "Резюме не создано"


def get_state(user_id: int):
    if user_id in resumes:
        state = resumes[str(user_id)]
    else:
        state = {
            "input": "Привет!",
            "result": ""
        }
        resumes[str(user_id)] = state
    return state


def set_state(user_id: int, state):
    resumes[str(user_id)] = state
    save(resumes, resumes_file_name)
    print(f"=========={user_id}\n{state}\n\n")


def gpt_get_hr_question(user_id: int):
    state = get_state(str(user_id))
    topic = topic0 + state["input"]
    ai_answer = get_next_hr_question(system_doc, topic1, answer1, topic2, answer2, topic3, answer3, topic)
    print(insert_newlines(ai_answer))
    state["result"] = ai_answer
    set_state(str(user_id), state)

    next_hr_answer = ai_answer.split("}")[-1].strip()
    return next_hr_answer


def gpt_set_user_answer(user_id: int, user_answer: str):
    state = get_state(str(user_id))
    state["input"] += "\n"+user_answer
    set_state(user_id, state)


def get_next_hr_question(system, topic1, answer1, topic2, answer2, topic3, answer3, topic, temp=1, verbose=False):
    messages = [
        {"role": "system", "content": system},
        {"role": "user", "content": topic1},
        {"role": "assistant", "content": answer1},
        {"role": "user", "content": topic2},
        {"role": "assistant", "content": answer2},
        {"role": "user", "content": topic3},
        {"role": "assistant", "content": answer3},
        {"role": "user", "content": topic}
    ]

    if verbose:
        print('\n ===========================================: ')

    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo-16k",
        messages=messages,
        temperature=temp
    )
    next_question = completion.choices[0].message.content
    return next_question  # возвращает ответ


resumes_file_name = "resumes.json"
resumes = load(resumes_file_name)  # результаты работы чат-бота

# Получение ключа API от пользователя и установка его как переменной окружения
openai_key = config.OPENAI_API_KEY
os.environ["OPENAI_API_KEY"] = openai_key
openai.api_key = openai_key
